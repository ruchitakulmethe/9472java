/* Question 1) */

public class multithread1 extends thread 
{ 
 public void run() 
 { 
 try { 
 system.out.println("thread is executing now........"); 
 } 
 catch(exception e)
  { 
 } 
 } 
 public static void main (string[] args) 
 { 
 multithread1 m1= new multithread1(); 
 m1.start(); 
 m1.start(); 
 } 
}

Output : 
        thread is executing now........Exception in thread "main"
        java.lang.IllegalThreadStateException
        at java.base/java.lang.Thread.start(Unknown Source)
        at Multithread1.main(Multithread1.java:16)

/* Question 2 */

import java.util.concurrent.executorservice; 
import java.util.concurrent.executors; 
import java.util.concurrent.timeunit; 
 
public class testthread
 { 
 public static void main(final string[] arguments) throws 
interruptedexception 
{ 
 executorservice e = executors.newsinglethreadexecutor(); 
 try { 
 e.submit(new thread()); 
 system.out.println("shutdown executor"); 
 e.shutdown(); 
 e.awaittermination(5, timeunit.seconds); 
 }
  catch (interruptedexception ex)
  { 
 system.err.println("tasks interrupted"); 
 } finally 
 { 
 if (!e.isterminated())
  { 
 system.err.println("cancel non-finished tasks"); 
 } 
 e.shutdownnow(); 
 system.out.println("shutdown finished"); 
 } 
 } 
 static class task implements runnable
  {
 	public void run() 
 	{ 
 try { 
 long duration = (long) (math.random() * 20); 
 system.out.println("running task!"); 
 timeunit.seconds.sleep(duration); 
 }
  catch (interruptedexception ex) 
 { 
 ex.printstacktrace(); 
 } 
 } 
 } 
}

Output : Shutdown executor
         shutdown finished

/* Question 3 */

import java.util.concurrent.BlockingQueue; 
import java.util.concurrent.LinkedBlockingQueue; 
import java.util.logging.Level; 
import java.util.logging.Logger; 
public class ProducerConsumerProblem 
{ 
 public static void main(String args[])
 { 
 BlockingQueue sharedQueue = new LinkedBlockingQueue(); 
 Thread prod = new Thread(new Producer(sharedQueue)); 
 Thread cons = new Thread(new Consumer(sharedQueue)); 
 prod.start(); 
 cons.start(); 
 } 
} 
class Producer implements Runnable
 { 
 private final BlockingQueue sharedQueue; 
 public Producer(BlockingQueue sharedQueue)
  { 
 this.sharedQueue = sharedQueue; 
 } 
 @Override 
 public void run() 
 {
 	for(int i=0; i<10; i++)
 	{ 
 try { 
 System.out.println("Produced: " + i); 
 sharedQueue.put(i); 
 }
  catch (InterruptedException ex) 
 { 
 Logger.getLogger(Producer.class.getName()).log(Level.SEVERE, 
null, ex); 
 } 
 } 
 } 
} 
class Consumer implements Runnable
{ 
 private final BlockingQueue sharedQueue; 
 public Consumer (BlockingQueue sharedQueue) 
 { 
 this.sharedQueue = sharedQueue; 
 } 
 @Override 
 public void run()
  { 
 while(true)
 { 
 try { 
 System.out.println("Consumed: "+ sharedQueue.take()); 
 } 
 catch (InterruptedException ex) 
 { 
 Logger.getLogger(Consumer.class.getName()).log(Level.SEVERE, 
null, ex); 
 } 
 } 
 } 
}

Output : 
         Produced: 0
         Produced: 1
         Produced: 2
         Produced: 3
         Produced: 4
         Produced: 5
         Produced: 6
         Produced: 7
         Produced: 8
         Produced: 9
         Consumed: 0
         Consumed: 1
         Consumed: 2
         Consumed: 3
         Consumed: 4
         Consumed: 5
         Consumed: 6
         Consumed: 7
         Consumed: 8
         Consumed: 9

/* Question 4 */

import java.util.concurrent.Executor; 
import java.util.concurrent.Executors; 
import java.util.concurrent.ThreadPoolExecutor; 
import java.util.concurrent.TimeUnit; 
 
public class TestThread
 { 
 public static void main(final String[] arguments) throws InterruptedException 
{ 
 Executor e = Executors.newCachedThreadPool();
 e.execute(new Thread()); 
 ThreadPoolExecutor pool = (ThreadPoolExecutor)e; 
 pool.shutdown(); 
 } 
 static class Thread implements Runnable 
 { 
 public void run()
  { 
 try { 
 Long duration = (long) (Math.random() * 5); 
 System.out.println("Running Thread!"); 
 TimeUnit.SECONDS.sleep(duration); 
 System.out.println("Thread Completed");
 } 
 catch (InterruptedException ex) 
 { 
 ex.printStackTrace(); 
 } 
 } 
 } 
}

Output : Running Thread!
         Thread Completed

/* Question 5 */

import java.util.Random; 
import java.util.concurrent.ArrayBlockingQueue; 
import java.util.concurrent.BlockingQueue; 
 
public class TestThread { 
 
 public static void main(final String[] arguments) throws InterruptedException 
{
	BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(10); 
 Insert i = new Insert(queue); 
 Retrieve r = new Retrieve(queue); 
 new Thread(i).start(); 
 new Thread(r).start(); 
 Thread.sleep(2000); 
 } 
 static class Insert implements Runnable
  { 
 private BlockingQueue<Integer> queue; 
 public Insert(BlockingQueue queue) 
 { 
 this.queue = queue; 
 } 
 @Override 
 public void run()
  { 
 Random random = new Random(); 
 try { 
 int result = random.nextInt(200); 
 Thread.sleep(1000); 
 queue.put(result); 
 System.out.println("Added: " + result); 
 result = random.nextInt(10); 
 Thread.sleep(1000); 
 queue.put(result); 
 System.out.println("Added: " + result); 
 result = random.nextInt(50); 
 Thread.sleep(1000); 
 queue.put(result); 
 System.out.println("Added: " + result); 
 } 
 catch (InterruptedException e)
  { 
 e.printStackTrace(); 
 } 
 } 
 }
 static class Retrieve implements Runnable 
 { 
 private BlockingQueue<Integer> queue; 
 public Retrieve(BlockingQueue queue)
  { 
 this.queue = queue; 
 } 
 @Override 
 public void run() 
 { 
 try { 
 System.out.println("Removed: " + queue.take()); 
 System.out.println("Removed: " + queue.take()); 
 System.out.println("Removed: " + queue.take()); 
 } 
 catch (InterruptedException e) 
 { 
 e.printStackTrace(); 
 } 
 } 
 } 
}

Output : Added: 147
         Removed: 147
         Removed: 2
         Added: 2
         Added: 46
         Removed: 46








